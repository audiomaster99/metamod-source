# Metamod:Source
# Copyright (C) 2003-2024 AlliedModders LLC and authors
# Licensed under the GPLv3 license. See LICENSE file in the project root for details.

cmake_minimum_required(VERSION 3.14 FATAL_ERROR)

if(POLICY CMP0092)
	cmake_policy(SET CMP0092 NEW) # Don't add -W3 warning level by default.
endif()

project(metamod-source
	VERSION 1.0.0
	DESCRIPTION "Metamod:Source"
	HOMEPAGE_URL "https://github.com/Wend4r/metamod-source"
	LANGUAGES C CXX
)

set(LOADER_PROJECT_NAME "server")
string(TOLOWER "${PROJECT_NAME}" PROJECT_NAME_LOWER)
string(TOUPPER "${PROJECT_NAME}" PROJECT_NAME_UPPER)

set(PROJECT_AUTHOR "")
set(PROJECT_DESCRIPTION_FULL "Metamod:Source - C++ Plugin Environment and Detour Library for the Source Engine")
set(PROJECT_LICENSE "GPLv3")
string(TIMESTAMP PROJECT_BUILD_DATE "%Y-%m-%d")
string(TIMESTAMP PROJECT_BUILD_TIME "%H:%M:%S")

set(METAMOD_DIR "${CMAKE_SOURCE_DIR}")
set(METAMOD_THIRD_PARTY_DIR "${METAMOD_DIR}/third_party")
set(METAMOD_THIRD_PARTY_AMTL_DIR "${METAMOD_THIRD_PARTY_DIR}/amtl")
set(METAMOD_CORE_DIR "${METAMOD_DIR}/core")
set(METAMOD_CORE_PROVIDER_DIR "${METAMOD_CORE_DIR}/provider")
set(METAMOD_CORE_PROVIDER_SOURCE_DIR "${METAMOD_CORE_PROVIDER_DIR}/source")
set(METAMOD_CORE_PROVIDER_SOURCE2_DIR "${METAMOD_CORE_PROVIDER_DIR}/source2")
set(METAMOD_CORE_SOURCEHOOK_DIR "${METAMOD_CORE_DIR}/sourcehook")
set(METAMOD_PUBLIC_DIR "${METAMOD_DIR}/public")
set(METAMOD_LOADER_DIR "${METAMOD_DIR}/loader")
set(METAMOD_SYMBOLS_DIR "${METAMOD_DIR}/sym")
set(METAMOD_VERSIONLIB_DIR "${METAMOD_DIR}/versionlib")

option(METAMOD_SOURCE2 "Enable build for Source 2 games" ON)

function(set_or_third_party_dir VAR_NAME DEFAULT_DIR)
	if(${VAR_NAME})
		file(TO_CMAKE_PATH "${${VAR_NAME}}" ${VAR_NAME})
	else()
		set(${VAR_NAME} "${METAMOD_THIRD_PARTY_DIR}/${DEFAULT_DIR}")
	endif()

	set(${VAR_NAME} "${${VAR_NAME}}" PARENT_SCOPE)
endfunction()

set_or_third_party_dir(SOURCESDK_DIR "sourcesdk")

set(METAMOD_INCLUDE_DIRS
	${METAMOD_THIRD_PARTY_AMTL_DIR}
	${METAMOD_CORE_DIR}
	${METAMOD_CORE_SOURCEHOOK_DIR}
	${METAMOD_PUBLIC_DIR}
	${METAMOD_LOADER_DIR}
	${METAMOD_VERSIONLIB_DIR}
)

set(METAMOD_COMPILE_DEFINITIONS
	${METAMOD_COMPILE_DEFINITIONS}

	META_PLUGIN_AUTHOR="${PROJECT_AUTHOR}"
	META_PLUGIN_PREFIX="${PROJECT_NAME_SUBSTRING}"
	META_PLUGIN_PREFIX_LOWER="${PROJECT_NAME_LOWER}"
	META_PLUGIN_PREFIX_UPPER="${PROJECT_NAME_UPPER}"
	META_PLUGIN_NAME="${PROJECT_DESCRIPTION}"
	META_PLUGIN_DESCRIPTION="${PROJECT_DESCRIPTION_FULL}"
	META_PLUGIN_URL="${PROJECT_HOMEPAGE_URL}"
	META_PLUGIN_LICENSE="${PROJECT_LICENSE}"
	META_PLUGIN_VERSION="${PROJECT_VERSION}"
	META_PLUGIN_DATE="${PROJECT_BUILD_DATE} ${PROJECT_BUILD_TIME}"
	META_PLUGIN_LOG_TAG="${PROJECT_NAME_UPPER}"
)

if(METAMOD_SOURCE2)
	list(APPEND METAMOD_COMPILE_DEFINITIONS META_IS_SOURCE2)
endif()

include(cmake/platform/shared.cmake)

include(cmake/sourcesdk.cmake)
include(cmake/targets/core.cmake)
include(cmake/targets/loader.cmake)

set(SOURCE_FILES
	${METAMOD_CORE_SOURCE_FILES}

	${METAMOD_VERSIONLIB_DIR}/versionlib.cpp
)

set(INCLUDE_DIRS
	${METAMOD_INCLUDE_DIRS}
)

# The Metamod:Source library.
add_library(${PROJECT_NAME} SHARED ${SOURCE_FILES})

set_target_properties(${PROJECT_NAME} PROPERTIES
	C_STANDARD 17
	C_STANDARD_REQUIRED ON
	C_EXTENSIONS OFF

	CXX_STANDARD 17
	CXX_STANDARD_REQUIRED ON
	CXX_EXTENSIONS OFF
)

set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME ${PROJECT_OUTPUT_NAME})

if(WINDOWS)
	set_target_properties(${PROJECT_NAME} PROPERTIES MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
elseif(MACOS)
	set_target_properties(${PROJECT_NAME} PROPERTIES OSX_ARCHITECTURES "x86_64")
endif()

target_compile_options(${PROJECT_NAME} PRIVATE ${COMPILE_OPTIONS} ${METAMOD_COMPILE_OPTIONS})
target_link_options(${PROJECT_NAME} PRIVATE ${LINK_OPTIONS} ${PLATFORM_LINK_OPTIONS} ${SOURCESDK_LINK_OPTIONS})

target_compile_definitions(${PROJECT_NAME} PRIVATE ${COMPILE_DEFINITIONS} ${METAMOD_COMPILE_DEFINITIONS})
target_include_directories(${PROJECT_NAME} PRIVATE ${INCLUDE_DIRS} ${SOURCESDK_INCLUDE_DIRS})

target_link_libraries(${PROJECT_NAME} PRIVATE ${LINK_LIBRARIES} ${SOURCESDK_BINARY_DIR})
